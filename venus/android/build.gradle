apply plugin: 'android'

android {

    /**
     * Builds an Android version code from the version of the project.
     * This is designed to handle the -SNAPSHOT and -RC format.
     *
     * I.e. during development the version ends with -SNAPSHOT. As the code stabilizes and release nears
     * one or many Release Candidates are tagged. These all end with "-RC1", "-RC2" etc.
     * And the final release is without any suffix.
     * @return
     */
	ext.buildVersionCode = {
		//The rules is as follows:
		//-SNAPSHOT counts as 0
		//-RC* counts as the RC number, i.e. 1 to 98
		//final release counts as 99.
		//Thus you can only have 98 Release Candidates, which ought to be enough for everyone

		def candidate = "99"
		def (major, minor, patch) = version.toLowerCase().replaceAll('-', '').tokenize('.')

		if(major == null)
			major = "0";
		if(minor == null)
			minor = "0";
		if(patch == null)
			patch = "0";

		if (patch.endsWith("snapshot")) {
			candidate = "0"
			patch = patch.replaceAll("[^0-9]","")
		} else {
			def rc
			(patch, rc) = patch.tokenize("rc")
			if (rc) {
				candidate = rc
			}
		}

		(major, minor, patch, candidate) = [major, minor, patch, candidate].collect{it.toInteger()}

		(major * 1000000) + (minor * 10000) + (patch * 100) + candidate;
	}
    compileSdkVersion highestSdkAvailable(27)

    defaultConfig {
        versionCode buildVersionCode()
        versionName version

		applicationId "org.bladecoder.engine"
        minSdkVersion 15
        targetSdkVersion 27

		buildConfigField "int", "EXPANSION_FILE_VERSION", "0"
    }

  flavorDimensions "default"

	productFlavors {
	    full {
	    }

        expansion {
		    buildConfigField "int", "EXPANSION_FILE_VERSION",  String.valueOf(android.defaultConfig.versionCode)
        }
    }

    if(project.hasProperty("hd")) {

    	defaultConfig.versionCode 2 * 10000000 + defaultConfig.versionCode

    	aaptOptions {
    		noCompress "png", "jpg"
    		ignoreAssetsPattern "0.5:0.25"
    	}
    } else if(project.hasProperty("sd")) {

    	defaultConfig.versionCode 1 * 10000000 + defaultConfig.versionCode

     	aaptOptions {
    		noCompress "png", "jpg"
    		ignoreAssetsPattern "1"
     	}
    } else {
     	aaptOptions {
    		noCompress "png", "jpg"
     	}
    }

    println "Version: $version Version Code: $defaultConfig.versionCode"

    sourceSets {
        main {
            if(project.hasProperty("hd")) {
    			manifest.srcFile 'AndroidManifestHD.xml'
    		} else {
            	manifest.srcFile 'AndroidManifest.xml'
            }

            java.srcDirs = ['src/main/java']
            aidl.srcDirs = ['src/main/java']
            renderscript.srcDirs = ['src/main/java']
            res.srcDirs = ['res']
            jniLibs.srcDirs = ['libs']
        }

		full.assets.srcDirs = ['../assets']
		expansion.assets.srcDirs = ['../base-assets']

    }

  packagingOptions {
    // Preventing from license violations (more or less):
    pickFirst 'META-INF/LICENSE.txt'
    pickFirst 'META-INF/LICENSE'
    pickFirst 'META-INF/license.txt'
    pickFirst 'META-INF/LGPL2.1'
    pickFirst 'META-INF/NOTICE.txt'
    pickFirst 'META-INF/NOTICE'
    pickFirst 'META-INF/notice.txt'
    // Excluding unnecessary meta-data:
    exclude 'META-INF/robovm/ios/robovm.xml'
    exclude 'META-INF/DEPENDENCIES.txt'
    exclude 'META-INF/DEPENDENCIES'
    exclude 'META-INF/dependencies.txt'
  }

    if(project.hasProperty('keystore')) {
          signingConfigs {
            release {
              storeFile file(project.keystore)
              storePassword project.storePassword
              keyAlias project.alias
              keyPassword project.keyPassword
            }
          }

          buildTypes {
            release {
            	  signingConfig signingConfigs.release
            }
          }
    }

    buildTypes {
          release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
           }
    }
}

configurations { natives }

dependencies {
   	compile project(":core")
        compile "com.badlogicgames.gdx:gdx-backend-android:$gdxVersion"
        natives "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-armeabi"
        natives "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-armeabi-v7a"
        natives "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-arm64-v8a"
        natives "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-x86"
        natives "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-x86_64"
        natives "com.badlogicgames.gdx:gdx-freetype-platform:$gdxVersion:natives-armeabi"
        natives "com.badlogicgames.gdx:gdx-freetype-platform:$gdxVersion:natives-armeabi-v7a"
        natives "com.badlogicgames.gdx:gdx-freetype-platform:$gdxVersion:natives-arm64-v8a"
        natives "com.badlogicgames.gdx:gdx-freetype-platform:$gdxVersion:natives-x86"
        natives "com.badlogicgames.gdx:gdx-freetype-platform:$gdxVersion:natives-x86_64"
}

// called every time gradle gets executed, takes the native dependencies of
// the natives configuration, and extracts them to the proper libs/ folders
// so they get packed with the APK.
task copyAndroidNatives() {
    file("libs/armeabi/").mkdirs();
    file("libs/armeabi-v7a/").mkdirs();
    file("libs/arm64-v8a/").mkdirs();
    file("libs/x86_64/").mkdirs();
    file("libs/x86/").mkdirs();

    configurations.natives.files.each { jar ->
        def outputDir = null
        if(jar.name.endsWith("natives-arm64-v8a.jar")) outputDir = file("libs/arm64-v8a")
        if(jar.name.endsWith("natives-armeabi-v7a.jar")) outputDir = file("libs/armeabi-v7a")
        if(jar.name.endsWith("natives-armeabi.jar")) outputDir = file("libs/armeabi")
        if(jar.name.endsWith("natives-x86_64.jar")) outputDir = file("libs/x86_64")
        if(jar.name.endsWith("natives-x86.jar")) outputDir = file("libs/x86")
        if(outputDir != null) {
            copy {
                from zipTree(jar)
                into outputDir
                include "*.so"
            }
        }
    }
}

task run(type: Exec) {
    def path
    def localProperties = project.file("../local.properties")
    if (localProperties.exists()) {
        Properties properties = new Properties()
        localProperties.withInputStream { instr ->
            properties.load(instr)
        }
        def sdkDir = properties.getProperty('sdk.dir')
        if (sdkDir) {
            path = sdkDir
        } else {
            path = "$System.env.ANDROID_HOME"
        }
    } else {
        path = "$System.env.ANDROID_HOME"
    }

    def adb = path + "/platform-tools/adb"
    commandLine "$adb", 'shell', 'am', 'start', '-n', android.defaultConfig.applicationId + '/' + android.defaultConfig.applicationId + '.AndroidLauncher'
}

task('packageMainExpansionFile', type: Zip) {

   FileTree tree = fileTree(dir: '../assets')

   from tree
   //into 'assets'

   // Expansion file name format: main.versionCode.packageName.obb
   entryCompression = ZipEntryCompression.STORED
   archiveName = 'main.' + android.defaultConfig.versionCode + "." + android.defaultConfig.applicationId + ".obb"

   println "Generating main." + archiveName

}

tasks.whenTaskAdded { task ->
   if(task.name == 'generateExpansionReleaseBuildConfig') {
       task.dependsOn packageMainExpansionFile
   }
}

// sets up the Android Eclipse project, using the old Ant based build.
eclipse {
    // need to specify Java source sets explicitely, SpringSource Gradle Eclipse plugin
    // ignores any nodes added in classpath.file.withXml
    sourceSets {
        main {
            java.srcDirs "src/main/java", 'gen'
        }
    }

    jdt {
        sourceCompatibility=1.7
        targetCompatibility=1.7
    }

    classpath {
        plusConfigurations += [ project.configurations.compile ]
        containers 'com.android.ide.eclipse.adt.ANDROID_FRAMEWORK', 'com.android.ide.eclipse.adt.LIBRARIES'
    }

    project {
        name = appName + "-android"
        natures 'com.android.ide.eclipse.adt.AndroidNature'
        buildCommands.clear();
        buildCommand "com.android.ide.eclipse.adt.ResourceManagerBuilder"
        buildCommand "com.android.ide.eclipse.adt.PreCompilerBuilder"
        buildCommand "org.eclipse.jdt.core.javabuilder"
        buildCommand "com.android.ide.eclipse.adt.ApkBuilder"
    }
}

// sets up the Android Idea project, using the old Ant based build.
idea {
    module {
        sourceDirs += file("src");
        scopes = [ COMPILE: [plus:[project.configurations.compile]]]

        iml {
            withXml {
                def node = it.asNode()
                def builder = NodeBuilder.newInstance();
                builder.current = node;
                builder.component(name: "FacetManager") {
                    facet(type: "android", name: "Android") {
                        configuration {
                            option(name: "UPDATE_PROPERTY_FILES", value:"true")
                        }
                    }
                }
            }
        }
    }
}


int highestSdkAvailable(int defaultSdk) {
  try {
      def buildToolsDir = new File(android.getSdkDirectory().toString(), "platforms")
      def sdks = buildToolsDir.list([accept:{ d, f-> f.startsWith("android-") && new File(d, f).isDirectory() }] as FilenameFilter).sort { a, b -> b <=> a }
      def highestSdk = sdks[0]
      if (highestSdk != null) {
          println "Using highest found SDK " + highestSdk.substring(8)
          highestSdk.substring(8).toInteger()
      } else {
          println "No installed SDKs found. Using default SDK " + defaultSdk
          defaultSdk
      }
  } catch (any) {
      println "Exception while determining highest SDK. Using default SDK " +
              defaultSdk
      defaultSdk
  }
}
