apply plugin: 'java-library'
apply plugin: 'application'

sourceCompatibility = 1.8
targetCompatibility = 1.8

sourceSets.main.resources.srcDirs += [ rootProject.file('assets').absolutePath ]
mainClassName = "com.bladecoder.engine.desktop.DesktopLauncher"

dependencies {
    implementation project(":core")
    implementation "com.badlogicgames.gdx:gdx-backend-lwjgl3:$gdxVersion"
    implementation "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-desktop"
    implementation "com.badlogicgames.gdx:gdx-freetype-platform:$gdxVersion:natives-desktop"
    implementation "com.badlogicgames.gdx:gdx-lwjgl3-angle:$gdxVersion"
    implementation "com.badlogicgames.gdx-controllers:gdx-controllers-desktop:$gdxControllersVersion"
}

def os = System.properties['os.name'].toLowerCase()

run {
    standardInput = System.in
    ignoreExitValue = true

    if (project.hasProperty("appArgs")) {
        args Eval.me(appArgs)
    }

    if (os.contains('mac')) {
        jvmArgs = ["-XstartOnFirstThread"]
    }
}

jar {
// sets the name of the .jar file this produces to the name of the game or app.
    archiveBaseName.set(appName)
// using 'lib' instead of the default 'libs' appears to be needed by jpackageimage.
    destinationDirectory = file("$project.buildDir/lib")
// the duplicatesStrategy matters starting in Gradle 7.0; this setting works.
    duplicatesStrategy(DuplicatesStrategy.EXCLUDE)
    dependsOn configurations.runtimeClasspath
    from { configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
// these "exclude" lines remove some unnecessary duplicate files in the output JAR.
    exclude('META-INF/INDEX.LIST', 'META-INF/*.SF', 'META-INF/*.DSA', 'META-INF/*.RSA')
    dependencies {
        exclude('META-INF/INDEX.LIST', 'META-INF/maven/**')
    }
// setting the manifest makes the JAR runnable.
    manifest {
        attributes 'Main-Class': project.mainClassName
    }
// this last step may help on some OSes that need extra instruction to make runnable JARs.
    doLast {
        file(archiveFile).setExecutable(true, false)
    }
}


task dist(type: Jar) {
    duplicatesStrategy(DuplicatesStrategy.EXCLUDE)
    manifest {
        attributes 'Main-Class': project.mainClassName
    }
    dependsOn configurations.runtimeClasspath
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
    with jar
}

dist.dependsOn classes
dist.dependsOn ':core:jar'
processResources.dependsOn ':core:setVersion'
